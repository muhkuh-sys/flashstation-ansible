---
- hosts: FreshlyInstalledBoards
  remote_user: muhkuh
  become: yes
  become_user: root
  vars:
    ask_pass: True
    ansible_ssh_pass: muhkuh65536

  tasks:
  - name: Update the package list
    ansible.builtin.apt:
      update_cache: yes

  - name: disable unneeded hardware
    lineinfile:
      path: /boot/firmware/usercfg.txt
      state: present
      line: '{{ item }}'
    with_items:
      - 'dtoverlay=disable-wifi'
      - 'dtoverlay=disable-bt'
      - 'hdmi_blanking=2'
      - 'disable_splash=1'
      - 'boot_delay=0'

  - name: blacklist unwanted modules
    kernel_blacklist:
      blacklist_file: /etc/modprobe.d/raspi-blacklist.conf
      name: '{{ item }}'
      state: present
    with_items:
      - 'brcmfmac'
      - 'brcmutil'
      - 'bluetooth'
      - 'btsdio'

  - name: uninstall unwanted packets
    ansible.builtin.apt:
      name: ['cloud-init', 'landscape-common', 'pastebinit', 'plymouth', 'snapd', 'unattended-upgrades']
      state: absent
      purge: yes

  - name: Disable unwanted services.
    ansible.builtin.systemd:
      name: '{{ item }}'
      enabled: no
      state: stopped
    with_items:
      - 'apt-daily.timer'
      - 'wpa_supplicant.service'
      - 'accounts-daemon.service'

  - name: limit the journal
    ansible.builtin.ini_file:
      path: /etc/systemd/journald.conf
      section: Journal
      option: SystemMaxUse
      value: 128M
      create: no

  - name: Set the hostname.
    ansible.builtin.hostname:
      name: "flashstation-{{ lookup('file', '/etc/machine-id') }}"

  - name: Install packages.
    ansible.builtin.apt:
      name: ['avahi-daemon', 'sntp']
      state: present

  - name: Set the timezone.
    ansible.builtin.timezone:
      name: Europe/Berlin

  - name: Install the raspberry-ready-led
    unarchive:
      # Source: https://github.com/muhkuh-sys/org.muhkuh.tools-raspberry-ready-led/releases/download/v0.0.1/raspberry-ready-led-0.0.1-ubuntu-20.04_arm64.tar.gz
      src: data/raspberry-ready-led-0.0.1-ubuntu-20.04_arm64.tar.gz
      dest: /opt/
  - name: Install the raspberry-ready-led service file
    copy:
      src: /opt/raspberry-ready-led-0.0.1/systemd/ready_led.service
      dest: /lib/systemd/system/
      remote_src: yes
  - name: Enable the raspberry-ready-led service
    systemd:
      name: ready_led.service
      enabled: yes
      masked: no

  - name: install the eth-kickstart
    unarchive:
      # Source: https://github.com/muhkuh-sys/org.muhkuh.tools-eth_kick_start/releases/download/v0.0.1/eth_kick_start_netx4000-0.0.1-ubuntu-20.04_arm64.tar.gz
      src: data/eth_kick_start_netx4000-0.0.1-ubuntu-20.04_arm64.tar.gz
      dest: /opt/
  - name: install the eth-kickstart service file
    copy:
      src: data/etc/systemd/system/eth_kickstart.service
      dest: /etc/systemd/system/
  - name: Enable the eth-kickstart service
    systemd:
      name: eth_kickstart.service
      enabled: yes
      masked: no

  - name: Install the TFTP server.
    apt:
      name: tftpd-hpa
      state: present

  - name: Install the flashstation APP.
    copy:
      src: data/var/lib/tftpboot/flashapp_netx4000.img
      dest: /srv/tftp/

  - name: install the DHCP server
    apt:
      name: isc-dhcp-server
      state: present
  - name: install the DHCP configuration
    copy:
      src: data/etc/dhcp/dhcpd.conf
      dest: /etc/dhcp/
      force: yes

  - name: install the network configuration
    copy:
      src: data/etc/netplan/50-cloud-init.yaml
      dest: /etc/netplan/
      force: yes
  - name: prevent cloud network configuration
    copy:
      src: data/etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
      dest: /etc/cloud/cloud.cfg.d/
      force: yes

  - name: Create the mount point for the memorystick
    file:
      path: /media/data
      state: directory
  - name: Mount the memorystick at /media/data
    ansible.posix.mount:
      path: /media/data
      src: /dev/sda1
      fstype: vfat
      opts: auto,nofail,nodev,noexec,nosuid,ro
      dump: '0'
      passno: '0'
      state: present
  - name: Make sure the memory stick is not mounted now.
    ansible.posix.mount:
      path: /media/data
      state: unmounted
  - name: Install a default web page.
    copy:
      src: data/media/data/index.html
      dest: /media/data/index.html

  - name: Install the web server.
    apt:
      name: nginx-core
      state: present
  - name: Configure the web server.
    copy:
      src: data/etc/nginx/sites-available/default
      dest: /etc/nginx/sites-available/
      force: yes

  # NOTE: The goal is to create an empty virtualenv, but the ansible pip
  #       module insists on installing something. dummy_test to the rescue!
  #       See here for details: https://pypi.org/project/dummy_test/
  - name: Install python3 venv.
    apt:
      name: python3-venv
      state: present
  - name: Create a virtualenv for the flasherapp-notifications service.
    ansible.builtin.pip:
      name: dummy_test
      virtualenv: /opt/flasherapp-notifications/
      virtualenv_command: /usr/bin/python3 -m venv
  - name: Install the sample flasherapp-notifications script.
    copy:
      src: data/opt/flasherapp-notifications/notifications.py
      dest: /opt/flasherapp-notifications/
  - name: Install the flasherapp-notifications service file.
    copy:
      src: data/etc/systemd/system/flasherapp-notifications.service
      dest: /etc/systemd/system/
  - name: Enable the flasherapp-notifications service.
    systemd:
      name: flasherapp-notifications.service
      enabled: yes
      masked: no

  - name: Set the filesystem to read-only
    lineinfile:
      path: /etc/overlayroot.local.conf
      state: present
      line: '{{ item }}'
    with_items:
      - 'overlayroot_cfgdisk=LABEL=OROOTCFG'
      - 'overlayroot="tmpfs:recurse=0"'

  - name: Poweroff
    community.general.shutdown:
